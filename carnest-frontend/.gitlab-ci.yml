stages:
  - build
  - deploy

.assume_role: &assume_role
  - >
    STS=($(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token $ID_TOKEN
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - export AWS_ACCESS_KEY_ID="${STS[0]}"
  - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
  - export AWS_SESSION_TOKEN="${STS[2]}"

variables:
  S3_BUCKET: $S3_BUCKET_NAME
  AWS_REGION: $AWS_REGION

build:
  stage: build
  image: node:latest
  before_script:
    - chmod +r $PRODUCTION_ENV_FILE
    - cp ${PRODUCTION_ENV_FILE} .env
    - source .env
  script:
    - echo "REACT_APP_BASE_URL=$REACT_APP_API_BASE_URL" > .env
    - npm install
    - npm run build
  artifacts:
    paths:
      - build/
    expire_in: 24 hours # Increased expiry time
    when: always
  only:
    - main

deploy s3:
  stage: deploy
  image:
    name: amazon/aws-cli:latest
    entrypoint:
      - "/usr/bin/env"
  id_tokens:
    ID_TOKEN:
      aud: carnest-frontend
  script:
    - *assume_role
    - aws s3 sync build/ s3://$S3_BUCKET --region $AWS_REGION
  only:
    - main
